// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// This is your Prisma schema file
// Learn more about it at https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String            @id @default(uuid())
  email                String            @unique
  passwordHash         String
  firstName            String?
  lastName             String?
  role                 UserRole          @default(DONOR)
  verified             Boolean           @default(false)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  verificationToken    String?           @unique
  passwordResetToken   String?           @unique
  passwordResetExpires DateTime?
  lastLogin            DateTime?
  profileImageUrl      String?
  preferences          Json?
  
  // Relations
  donations            Donation[]
  charity              Charity?          // If user is associated with a charity
  
  @@map("users")
}

enum UserRole {
  DONOR
  CHARITY_ADMIN
  SYSTEM_ADMIN
}

model Charity {
  id                String     @id @default(uuid())
  name              String
  registrationNumber String    @unique  // Government registration number
  taxId             String?    @unique
  description       String?    @db.Text
  logoUrl           String?
  websiteUrl        String?
  contactEmail      String
  contactPhone      String?
  address           String?    @db.Text
  verified          Boolean    @default(false)
  verificationDate  DateTime?
  adminId           String     @unique
  admin             User       @relation(fields: [adminId], references: [id], onDelete: Cascade)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  
  // Relations
  donations         Donation[]
  projects          Project[]
  
  @@map("charities")
}

model Donation {
  id              String    @id @default(uuid())
  amount          Float
  donorId         String
  donor           User      @relation(fields: [donorId], references: [id])
  charityId       String
  charity         Charity   @relation(fields: [charityId], references: [id])
  projectId       String?
  project         Project?  @relation(fields: [projectId], references: [id])
  transactionCode String    @unique  // Unique code for blockchain verification
  paymentMethod   String
  status          String
  createdAt       DateTime  @default(now())
  
  @@map("donations")
}

model Project {
  id              String     @id @default(uuid())
  title           String
  description     String?    @db.Text
  targetAmount    Float
  currentAmount   Float      @default(0)
  startDate       DateTime
  endDate         DateTime?
  status          String     @default("ACTIVE")
  charityId       String
  charity         Charity    @relation(fields: [charityId], references: [id], onDelete: Cascade)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  
  // Relations
  donations       Donation[]
  
  @@map("projects")
}