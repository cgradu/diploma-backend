// Modified schema.prisma with one-to-one charity-manager relationship

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  password         String
  name             String
  role             Role      @default(donor)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  address          String?
  phone            String?
  
  donations        Donation[]
  managedCharity   Charity?  // One user can manage only one charity
}

model BlockchainVerification {
  id              Int      @id @default(autoincrement())
  transactionHash String   @unique
  blockNumber     Int
  timestamp       DateTime
  verified        Boolean  @default(false)
  createdAt       DateTime @default(now())
  donationId      Int      @unique
  donation        Donation @relation(fields: [donationId], references: [id])
}

model Charity {
  id               Int              @id @default(autoincrement())
  name             String
  description      String           @db.Text
  mission          String           @db.Text
  email            String           @unique
  phone            String?
  registrationId   String           @unique
  category         Charity_category
  address          String?
  foundedYear      Int?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  managerId        Int              @unique  // One charity has exactly one manager
  manager          User             @relation(fields: [managerId], references: [id])
  
  updates          CharityUpdate[]
  donations        Donation[]
  projects         Project[]

  @@index([category])
}

model CharityUpdate {
  id        Int      @id @default(autoincrement())
  title     String
  content   String   @db.Text
  createdAt DateTime @default(now())
  charityId Int
  charity   Charity  @relation(fields: [charityId], references: [id])

  @@index([charityId])
}

// Enums remain the same
enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  REFUNDED
}

enum BlockchainStatus {
  PENDING
  VERIFIED
  FAILED
}

model Donation {
  id                     Int                     @id @default(autoincrement())
  amount                 Float
  transactionId          String                  @unique
  paymentIntentId        String?                 @unique  // Stripe payment intent ID
  paymentStatus          PaymentStatus           @default(PENDING)
  message                String?                 @db.Text
  anonymous              Boolean                 @default(false)
  createdAt              DateTime                @default(now())
  donorId                Int
  charityId              Int
  projectId              Int?
  currency               String                  @default("RON")
  receiptUrl             String?                 // URL to the Stripe receipt
  
  blockchainVerification BlockchainVerification?
  charity                Charity                 @relation(fields: [charityId], references: [id])
  donor                  User                    @relation(fields: [donorId], references: [id])
  project                Project?                @relation(fields: [projectId], references: [id])
  
  @@index([charityId])
  @@index([donorId])
  @@index([projectId])
}

model Project {
  id            Int            @id @default(autoincrement())
  title         String
  description   String         @db.Text
  goal          Float
  currentAmount Float          @default(0)
  startDate     DateTime
  endDate       DateTime?
  status        Project_status @default(ACTIVE)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  charityId     Int
  
  donations     Donation[]
  charity       Charity        @relation(fields: [charityId], references: [id])

  @@index([charityId])
  @@index([status])
}

enum Role {
  donor
  charity
  admin
}

enum Project_status {
  ACTIVE
  COMPLETED
  CANCELLED
  PAUSED
}

enum Charity_category {
  EDUCATION
  HEALTHCARE
  ENVIRONMENT
  HUMANITARIAN
  ANIMAL_WELFARE
  ARTS_CULTURE
  DISASTER_RELIEF
  HUMAN_RIGHTS
  COMMUNITY_DEVELOPMENT
  RELIGIOUS
  OTHER
}